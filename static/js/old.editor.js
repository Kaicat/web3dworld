// Generated by CoffeeScript 1.4.0
(function() {
  var camera, container, controls, events, floorDepth, generateObjectName, height, helper, initCamera, initEvents, initFloor, initFurnitures, initLight, initOutsideEnv, initScene, initSky, initThree, initViewport, initWalls, initWorld, jsonLoader, light, loadObjectById, loadObjectByUrl, object3dArray, projector, ray, render, renderer, scene, threeStart, update, web3deditor, width, zero;

  renderer = null;

  camera = null;

  scene = null;

  light = null;

  controls = null;

  ray = null;

  projector = null;

  container = document.getElementById('canvas-container');

  width = container.clientWidth;

  height = window.innerHeight;

  helper = window.helper;

  object3dArray = new helper.Set();

  window['web3deditor'] = web3deditor = {};

  web3deditor.events = events = {};

  window['object3dArray'] = object3dArray;

  floorDepth = -300;

  jsonLoader = new THREE.JSONLoader;

  zero = new THREE.Vector3(0, 0, 0);

  generateObjectName = function() {
    var randN;
    randN = parseInt(Math.random() * 1001) + 1;
    return "obj" + randN;
  };

  web3deditor['addObjectToScene'] = function(obj, posistion, rotation) {
    if (posistion == null) {
      posistion = zero;
    }
    if (rotation == null) {
      rotation = zero;
    }
    if (obj instanceof THREE.Geometry) {
      obj = new THREE.Mesh(obj, new THREE.MeshBasicMaterial());
    } else if (obj instanceof THREE.Object3D && !(obj instanceof THREE.Scene)) {

    } else {
      alert('只有除Scene以外的Object3D对象才可以被添加');
      return;
    }
    scene.add(obj);
    object3dArray.add(obj);
    if (!(obj.name instanceof String)) {
      obj.name = generateObjectName();
    }
    return window[obj.name] = obj;
  };

  web3deditor['loadObjectByUrl'] = loadObjectByUrl = function(url, handler) {
    return jsonLoader.load(url, handler);
  };

  web3deditor['loadObjectById'] = loadObjectById = function(id, handler) {
    var url;
    url = '/resource/id/' + id;
    return loadObjectByUrl(url, handler);
  };

  web3deditor['loadObjectByName'] = function(name, handler) {
    var url;
    url = '/resource/name/' + name;
    return loadObjectByUrl(url, handler);
  };

  initThree = function() {
    renderer = new THREE.WebGLRenderer({
      antialias: true,
      precision: 'highp',
      alpha: true,
      preserveDrawingBuffer: true,
      maxLights: 5
    });
    renderer.setSize(width, height);
    renderer.setClearColor(0xffffff, 0.1);
    container.appendChild(renderer.domElement);
    return window['container'] = container;
  };

  initScene = function() {
    scene = new THREE.Scene;
    window['scene'] = scene;
    return object3dArray.add(scene);
  };

  initCamera = function() {
    var aspect, far, near, view_angle;
    view_angle = 45;
    aspect = width / height;
    near = 0.1;
    far = 20000;
    window['camera'] = camera = new THREE.PerspectiveCamera(view_angle, aspect, near, far);
    object3dArray.add(camera);
    camera.position.set(200, 250, 0);
    return camera.lookAt(scene.position);
  };

  initLight = function() {
    light = new THREE.PointLight(0xff0000, 1.0, 0);
    light.position.set(50, 50, 50);
    scene.add(light);
    return scene.add(new THREE.AmbientLight(0xff0000));
  };

  initEvents = function() {
    var cameraDownHandler, cameraUpHandler;
    THREEx.WindowResize(renderer, camera);
    $(container).bind('mousewheel', function(event, delta, deltaX, deltaY) {
      var o, proportion, _i, _len, _ref, _results;
      proportion = delta > 0 ? 1.05 : 0.95;
      _ref = object3dArray.data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        o = _ref[_i];
        _results.push(helper.scaleObject3DWithPosition(o, proportion));
      }
      return _results;
    });
    cameraUpHandler = function() {
      return helper.scaleObject3DWithPosition(camera, 1.1);
    };
    cameraDownHandler = function() {
      return helper.scaleObject3DWithPosition(camera, 0.9);
    };
    events['cameraUpHandler'] = cameraUpHandler;
    return events['cameraDownHandler'] = cameraDownHandler;
  };

  initFloor = function() {
    var floor, floorGeometry, floorMaterial, floorTexture, proportion;
    floorTexture = THREE.ImageUtils.loadTexture(static_url + 'img/grasslight-big.jpg');
    floorMaterial = new THREE.MeshBasicMaterial({
      map: floorTexture
    });
    floorGeometry = new THREE.PlaneGeometry(1000, 1000, 10, 10);
    floor = new THREE.Mesh(floorGeometry, floorMaterial);
    floor.position.set(0, floorDepth, 0);
    proportion = 4.0;
    floor.rotation.x = 0;
    floor.rotation.y = 0;
    floor.rotation.z = 0;
    helper.scaleObject3D(floor, proportion);
    floor.doubleSided = true;
    window['floor'] = floor;
    scene.add(floor);
    return object3dArray.add(floor);
  };

  initSky = function() {
    var materialArray, skybox, skyboxGeom;
    materialArray = [];
    materialArray.push(new THREE.MeshBasicMaterial({
      map: THREE.ImageUtils.loadTexture(static_url + 'img/dawnmountain-xpos.png')
    }));
    materialArray.push(new THREE.MeshBasicMaterial({
      map: THREE.ImageUtils.loadTexture(static_url + 'img/dawnmountain-xneg.png')
    }));
    materialArray.push(new THREE.MeshBasicMaterial({
      map: THREE.ImageUtils.loadTexture(static_url + 'img/dawnmountain-ypos.png')
    }));
    materialArray.push(new THREE.MeshBasicMaterial({
      map: THREE.ImageUtils.loadTexture(static_url + 'img/dawnmountain-yneg.png')
    }));
    materialArray.push(new THREE.MeshBasicMaterial({
      map: THREE.ImageUtils.loadTexture(static_url + 'img/dawnmountain-zpos.png')
    }));
    materialArray.push(new THREE.MeshBasicMaterial({
      map: THREE.ImageUtils.loadTexture(static_url + 'img/dawnmountain-zneg.png')
    }));
    skyboxGeom = new THREE.CubeGeometry(5000, 5000, 5000, 1, 1, 1, materialArray);
    skybox = new THREE.Mesh(skyboxGeom, new THREE.MeshFaceMaterial());
    skybox.flipSided = true;
    window['skybox'] = skybox;
    scene.add(skybox);
    object3dArray.add(skybox);
    return scene.fog = new THREE.FogExp2(0x9999ff, 0.00025);
  };

  initWalls = function() {
    return jsonLoader.load(static_url + 'json/qiangbi1.json', function(geom) {
      var proportion, wallMaterial, wallMesh, wallTexture;
      wallTexture = THREE.ImageUtils.loadTexture(static_url + 'img/sicai001.jpg');
      wallMaterial = new THREE.MeshBasicMaterial({
        map: wallTexture
      });
      wallMesh = new THREE.Mesh(geom, wallMaterial);
      wallMesh.receiveShadow = true;
      proportion = 1.5;
      helper.scaleObject3D(wallMesh, proportion);
      scene.add(wallMesh);
      window['wall'] = wallMesh;
      object3dArray.add(wallMesh);
      return wallMesh.position.set(proportion * 50, floorDepth, 0);
    });
  };

  initOutsideEnv = function() {
    return jsonLoader.load(static_url + 'json/ta1.json', function(geom) {
      var mate, proportion, taMesh;
      mate = new THREE.MeshBasicMaterial({
        color: "#ff0000"
      });
      taMesh = new THREE.Mesh(geom, mate);
      proportion = 7.0;
      taMesh.receiveShadow = true;
      helper.scaleObject3D(taMesh, proportion);
      scene.add(taMesh);
      window['ta'] = taMesh;
      object3dArray.add(taMesh);
      taMesh.position.set(-1000, floorDepth, -400);
      return taMesh.rotation.set(0, 1.0, 0);
    });
  };

  initFurnitures = function() {
    jsonLoader.load(static_url + 'json/safa3.json', function(geom) {
      var material, safaMesh, texture;
      texture = THREE.ImageUtils.loadTexture(static_url + 'img/bed_auto.jpg');
      material = new THREE.MeshBasicMaterial({
        map: texture
      });
      safaMesh = new THREE.Mesh(geom, material);
      safaMesh.receiveShadow = true;
      helper.scaleObject3D(safaMesh, 1.2);
      scene.add(safaMesh);
      window['safa'] = safaMesh;
      object3dArray.add(safaMesh);
      safaMesh.position.set(-50, floorDepth, 400);
      return safaMesh.rotation.set(0, 3.2, 0);
    });
    return jsonLoader.load(static_url + 'json/men1.json', function(geom) {
      var mate, men, proportion;
      mate = new THREE.MeshBasicMaterial({});
      men = new THREE.Mesh(geom, mate);
      proportion = 2.6;
      men.receiveShadow = true;
      helper.scaleObject3D(men, proportion);
      scene.add(men);
      window['men'] = men;
      object3dArray.add(men);
      return men.position.set(-100, floorDepth, -150);
    });
  };

  initWorld = function() {
    initFloor();
    initSky();
    initWalls();
    initOutsideEnv();
    return initFurnitures();
  };

  initViewport = function() {
    var onMouseDown, picked, selected;
    ray = new THREE.Raycaster();
    projector = new THREE.Projector();
    picked = null;
    selected = camera;
    return onMouseDown = function(event) {
      var intersects, root, vector;
      container.focus();
      event.preventDefault();
      if (event.button === 0) {
        vector = new THREE.Vector3(((event.clientX - container.offsetLeft) / container.offsetWidth) * 2 - 1, -((event.clientY - container.offsetTop) / container.offsetHeight) * 2 + 1, 0.5);
        projector.unprojectVector(vector, camera);
        ray.set(camera.position, vector.sub(camera.position).normalize());
        intersects = ray.intersectObjects(object3dArray.data, true);
        if (intersects.length > 0) {
          controls.enabled = false;
          picked = intersects[0].object;
          root = null;
          if (picked.properties.isGizmo) {
            root = picked.properties.gizmoRoot;
            selected = picked.properties.gizmoSubject;
          } else {
            root = picked;
            selected = picked;
          }
          return console.log(selected);
        } else {
          return controls.enabled = true;
        }
      }
    };
  };

  update = function() {
    return controls.update();
  };

  render = function() {
    requestAnimationFrame(render);
    renderer.render(scene, camera);
    return update();
  };

  threeStart = function() {
    var axes;
    initThree();
    initScene();
    initCamera();
    initLight();
    initWorld();
    initEvents();
    window['controls'] = controls = new THREE.TrackballControls(camera, container);
    window['axes'] = axes = new THREE.AxisHelper();
    scene.add(axes);
    return render();
  };

  threeStart();

}).call(this);
